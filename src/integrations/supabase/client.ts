// This file is automatically generated. Do not edit it directly.
import type { SupabaseClient } from '@supabase/supabase-js';
import type { Database } from './types';

declare global {
  interface Window {
    __supabaseClient?: SupabaseClient<Database>;
  }
}

const SUPABASE_URL =
  import.meta.env.SUPABASE_URL ?? import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY =
  import.meta.env.SUPABASE_ANON_KEY ?? import.meta.env.VITE_SUPABASE_ANON_KEY;

let supabase: SupabaseClient<Database> | null =
  typeof window !== 'undefined' ? window.__supabaseClient ?? null : null;

let initializationPromise: Promise<SupabaseClient<Database> | null> | null = null;

const createSupabaseClient = async (): Promise<SupabaseClient<Database> | null> => {
  if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
    if (process.env.NODE_ENV === 'development') {
      console.warn(
        'Missing Supabase environment variables (SUPABASE_URL / SUPABASE_ANON_KEY). Supabase features are disabled.'
      );
    }
    return null;
  }

  const { createClient } = await import('@supabase/supabase-js');

  const authOptions = {
    persistSession: true,
    autoRefreshToken: true,
    storage: (() => {
      try {
        return typeof window !== 'undefined' ? window.localStorage : undefined;
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          console.warn('Supabase auth storage unavailable:', error);
        }
        return undefined;
      }
    })()
  } as const;

  const client = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
    auth: authOptions
  });

  if (typeof window !== 'undefined') {
    window.__supabaseClient = client;
  }

  return client;
};

export const getSupabaseClient = async (): Promise<SupabaseClient<Database> | null> => {
  if (supabase) {
    return supabase;
  }

  if (!initializationPromise) {
    initializationPromise = createSupabaseClient()
      .then((client) => {
        supabase = client;
        return client;
      })
      .catch((error) => {
        console.error('Failed to initialize Supabase client:', error);
        initializationPromise = null;
        return null;
      });
  }

  return initializationPromise;
};

export const getSupabaseClientSync = (): SupabaseClient<Database> | null => supabase;

if (!supabase) {
  void getSupabaseClient();
}

export { supabase };