/**
 * @module useUserSession
 * @description A custom React hook that handles user authentication logic.
 * Manages Supabase authentication and delegates state management to useAppStore.
 *
 * @example
 * // Using the hook in a component
 * const { login, logout, error } = useUserSession();
 *
 * // Login a user
 * await login('JohnDoe');
 *
 * // Logout
 * await logout();
 *
 * @returns {Object} Authentication management object
 * @property {Function} login - Async function to log in a user
 * @property {Function} logout - Async function to log out the current user
 * @property {string|null} error - Any error message from login/logout operations
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - function useUserSession() (line 62)
 *   - useEffect(() => (line 77)
 *   - const initializeSession = async () => (line 78)
 *   - if (storedUser) (line 81)
 *   - devLog('Found stored user:', storedUser); (line 82)
 *   - if (dbError || !data) (line 90)
 *   - setUserName(""); (line 93)
 *   - setIsLoggedIn(false); (line 94)
 *   - setUserName(storedUser); (line 96)
 *   - setIsLoggedIn(true); (line 97)
 *   - setIsInitialized(true); (line 103)
 *   - initializeSession(); (line 107)
 *   - devLog('Attempting to login with name:', name); (line 117)
 *   - if (!name || typeof name !== 'string' || name.trim() === '') (line 119)
 *   - if (upsertError) (line 138)
 *   - setUserName(trimmedName); (line 143)
 *   - setIsLoggedIn(true); (line 144)
 *   - setError(null); (line 145)
 *   - devLog('Login successful. Current user:', trimmedName); (line 147)
 *   - setError(err.message); (line 151)
 *   - devLog('Logging out user:', userName); (line 161)
 *   - setUserName(''); (line 163)
 *   - setIsLoggedIn(false); (line 164)
 *   - setError(null); (line 165)
 *   - devLog('Logout complete'); (line 166)
 *   - useEffect(() => (line 171)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

import { useState, useCallback } from 'react';
import { supabase } from '../../../backend/api/supabaseClient';
import { devLog } from '../../shared/utils/coreUtils';
import useAppStore from '../store/useAppStore';

function useUserSession() {
  const [error, setError] = useState(null);

  // * Get user state and actions from store
  const { user, userActions } = useAppStore();

  // * No initialization needed - store handles this

  /**
   * Logs in a user with the given name
   * @param {string} name - The username to login with
   * @throws {Error} If the name is invalid or if there's a database error
   */
  const login = useCallback(async (name) => {
    try {
      devLog('Attempting to login with name:', name);

      if (!name || typeof name !== 'string' || name.trim() === '') {
        throw new Error('Please enter a valid name');
      }

      const trimmedName = name.trim();

      if (!supabase) {
        if (process.env.NODE_ENV === 'development') {
          console.warn('Supabase not configured; using local login only');
        }
        // * Use store to update state and localStorage
        userActions.login(trimmedName);
        setError(null);
        return;
      }

      // Create/update user in cat_app_users table (basic user authentication)
      const { error: upsertError } = await supabase
        .from('cat_app_users')
        .upsert(
          {
            user_name: trimmedName,
            created_at: new Date().toISOString()
          },
          {
            onConflict: 'user_name',
            returning: 'minimal'
          }
        );

      if (upsertError) {
        throw upsertError;
      }

      // Set user context for RLS policies
      await supabase.rpc('set_user_context', { user_name_param: trimmedName }).catch(() => {
        // If function doesn't exist, that's okay - RLS will use JWT claims
      });

      // * Use store to update state and localStorage
      userActions.login(trimmedName);
      setError(null);

      devLog('Login successful. Current user:', trimmedName);
    } catch (err) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Login error:', err);
      }
      setError(err.message);
      throw err;
    }
  }, [userActions]);

  /**
   * Logs out the current user
   * Clears local storage and resets session state
   */
  const logout = useCallback(async () => {
    devLog('Logging out user:', user.name);
    // * Use store to update state and localStorage
    userActions.logout();
    setError(null);
    devLog('Logout complete');
  }, [user.name, userActions]);

  return {
    // * Return store values for backward compatibility
    userName: user.name,
    isLoggedIn: user.isLoggedIn,
    error,
    login,
    logout,
    isInitialized: true // * Store is always initialized
  };
}

export default useUserSession;
