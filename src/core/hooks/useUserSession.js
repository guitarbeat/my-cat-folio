/**
 * @module useUserSession
 * @description A custom React hook that manages user session state and authentication.
 * Handles user login/logout and persists user data in both localStorage and Supabase.
 *
 * @example
 * // Using the hook in a component
 * const { userName, isLoggedIn, error, login, logout } = useUserSession();
 *
 * // Login a user
 * await login('JohnDoe');
 *
 * // Logout
 * await logout();
 *
 * @returns {Object} Session management object
 * @property {string} userName - Current user's username
 * @property {boolean} isLoggedIn - Whether a user is currently logged in
 * @property {string|null} error - Any error message from login/logout operations
 * @property {Function} login - Async function to log in a user
 * @property {Function} logout - Async function to log out the current user
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - function useUserSession() (line 62)
 *   - useEffect(() => (line 77)
 *   - const initializeSession = async () => (line 78)
 *   - if (storedUser) (line 81)
 *   - devLog('Found stored user:', storedUser); (line 82)
 *   - if (dbError || !data) (line 90)
 *   - setUserName(""); (line 93)
 *   - setIsLoggedIn(false); (line 94)
 *   - setUserName(storedUser); (line 96)
 *   - setIsLoggedIn(true); (line 97)
 *   - setIsInitialized(true); (line 103)
 *   - initializeSession(); (line 107)
 *   - devLog('Attempting to login with name:', name); (line 117)
 *   - if (!name || typeof name !== 'string' || name.trim() === '') (line 119)
 *   - if (upsertError) (line 138)
 *   - setUserName(trimmedName); (line 143)
 *   - setIsLoggedIn(true); (line 144)
 *   - setError(null); (line 145)
 *   - devLog('Login successful. Current user:', trimmedName); (line 147)
 *   - setError(err.message); (line 151)
 *   - devLog('Logging out user:', userName); (line 161)
 *   - setUserName(''); (line 163)
 *   - setIsLoggedIn(false); (line 164)
 *   - setError(null); (line 165)
 *   - devLog('Logout complete'); (line 166)
 *   - useEffect(() => (line 171)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

import { useState, useEffect, useCallback, useRef } from 'react';
import { supabase } from '../../../backend/api/supabaseClient';
import { devLog } from '../../shared/utils/coreUtils';

function useUserSession() {
  // * Use ref to track if we've already initialized to prevent double initialization
  const initializedRef = useRef(false);

  // Initialize state with localStorage value immediately
  const [userName, setUserName] = useState(() => {
    try {
      return localStorage.getItem('catNamesUser') || '';
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error reading from localStorage:', error);
      }
      return '';
    }
  });
  const [isLoggedIn, setIsLoggedIn] = useState(() => Boolean(userName));
  const [error, setError] = useState(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // Initialize session state - only run once
  useEffect(() => {
    // * Prevent double initialization
    if (initializedRef.current) return;
    initializedRef.current = true;

    const initializeSession = async () => {
      const storedUser = localStorage.getItem('catNamesUser');

      // If Supabase isn't configured, fall back to localStorage only
      if (!supabase) {
        if (process.env.NODE_ENV === 'development') {
          console.warn(
            'Supabase not configured; using local storage for session management'
          );
        }
        if (storedUser) {
          setUserName(storedUser);
          setIsLoggedIn(true);
        }
        setIsInitialized(true);
        return;
      }

      try {
        if (storedUser) {
          devLog('Found stored user:', storedUser);

          const { data, error: dbError } = await supabase
            .from('cat_app_users')
            .select('user_name')
            .eq('user_name', storedUser)
            .single();

          if (dbError || !data) {
            if (process.env.NODE_ENV === 'development') {
              console.warn(
                'Stored user not found in database, clearing session'
              );
            }
            localStorage.removeItem('catNamesUser');
            setUserName('');
            setIsLoggedIn(false);
          } else {
            setUserName(storedUser);
            setIsLoggedIn(true);
          }
        }
      } catch (error) {
        if (process.env.NODE_ENV === 'development') {
          console.error('Session initialization error:', error);
        }
      } finally {
        setIsInitialized(true);
      }
    };

    initializeSession();
  }, []); // * Empty dependency array - only run once

  /**
   * Logs in a user with the given name
   * @param {string} name - The username to login with
   * @throws {Error} If the name is invalid or if there's a database error
   */
  const login = useCallback(async (name) => {
    try {
      devLog('Attempting to login with name:', name);

      if (!name || typeof name !== 'string' || name.trim() === '') {
        throw new Error('Please enter a valid name');
      }

      if (!supabase) {
        if (process.env.NODE_ENV === 'development') {
          console.warn('Supabase not configured; using local login only');
        }
        const trimmedName = name.trim();
        localStorage.setItem('catNamesUser', trimmedName);
        setUserName(trimmedName);
        setIsLoggedIn(true);
        setError(null);
        return;
      }

      const trimmedName = name.trim();

      // Create/update user in cat_app_users table (basic user authentication)
      const { error: upsertError } = await supabase
        .from('cat_app_users')
        .upsert(
          {
            user_name: trimmedName,
            created_at: new Date().toISOString()
          },
          {
            onConflict: 'user_name',
            returning: 'minimal'
          }
        );

      if (upsertError) {
        throw upsertError;
      }

      localStorage.setItem('catNamesUser', trimmedName);
      setUserName(trimmedName);
      setIsLoggedIn(true);
      setError(null);

      devLog('Login successful. Current user:', trimmedName);
    } catch (err) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Login error:', err);
      }
      setError(err.message);
      throw err;
    }
  }, []);

  /**
   * Logs out the current user
   * Clears local storage and resets session state
   */
  const logout = useCallback(async () => {
    devLog('Logging out user:', userName);
    localStorage.removeItem('catNamesUser');
    setUserName('');
    setIsLoggedIn(false);
    setError(null);
    devLog('Logout complete');
  }, [userName]);

  // * Removed the debug logging useEffect that was causing unnecessary re-renders

  return {
    userName,
    isLoggedIn,
    error,
    login,
    logout,
    isInitialized
  };
}

export default useUserSession;
