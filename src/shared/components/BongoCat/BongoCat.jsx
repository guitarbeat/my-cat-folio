/**
 * @component BongoCat
 * @description A fun animated cat that responds to user interactions
 */
/**
 * --- AUTO-GENERATED DOCSTRING ---
 * Table of content is automatically generated by Agent Docstrings v1.3.5
 *
 * Classes/Functions:
 *   - const CatBody = () => ( (line 26)
 *   - const Paw = () => ( (line 55)
 *   - const Paws = ( (line 64)
 *   - if (!containerRef) (line 142)
 * --- END AUTO-GENERATED DOCSTRING ---
 */

import React, { memo } from 'react';
import PropTypes from 'prop-types';
import { useBongoCat } from '@hooks/useBongoCat';
import styles from './BongoCat.module.css';

/**
 * Render the core cat body without paws.
 * @returns {JSX.Element}
 */
const CatBody = () => (
  <div className={styles.cat}>
    <div className={styles.head} />
    <div className={`${styles.ears} ${styles.fill}`}>
      <div className={styles.ear} />
      <div className={styles.ear} />
    </div>
    <div className={`${styles.ears} ${styles.outline}`}>
      <div className={styles.ear} />
      <div className={styles.ear} />
    </div>
    <div className={styles.face}>
      <div className={styles.eyes}>
        <div className={styles.eye} />
        <div className={styles.eye} />
      </div>
      <div className={styles.mouth}>
        <div className={styles.uu} />
      </div>
    </div>
  </div>
);

/**
 * Render a set of paws.
 * @param {Object} params
 * @param {"up"|"down"} params.position - Which paw orientation to render
 * @returns {JSX.Element}
 */
const Paw = () => (
  <div className={styles.paw}>
    <div className={styles.palm} />
    <div className={styles.bean} />
    <div className={styles.bean} />
    <div className={styles.bean} />
  </div>
);

const Paws = ({ position, className = '' }) => (
  <div className={`${styles.paws} ${styles[position]} ${className}`.trim()}>
    {position === 'up' ? (
      <>
        <Paw />
        <Paw />
      </>
    ) : (
      <>
        <div className={styles.paw} />
        <div className={styles.paw} />
      </>
    )}
  </div>
);

Paws.propTypes = {
  position: PropTypes.oneOf(['up', 'down']).isRequired,
  className: PropTypes.string
};

const PawsContainer = ({
  containerTop,
  pawsOffsetY,
  zIndex,
  isVisible,
  display,
  styleVars,
  pawsPosition
}) => (
  <div
    className={`${styles.bongoContainer} ${isVisible ? styles.bongoContainerVisible : styles.bongoContainerHidden}`}
    style={{
      top: `${containerTop + pawsOffsetY}px`,
      zIndex,
      display
    }}
  >
    <div className={styles.container} style={styleVars}>
      <Paws position={pawsPosition} />
    </div>
  </div>
);

PawsContainer.propTypes = {
  containerTop: PropTypes.number.isRequired,
  pawsOffsetY: PropTypes.number.isRequired,
  zIndex: PropTypes.number.isRequired,
  isVisible: PropTypes.bool.isRequired,
  display: PropTypes.string.isRequired,
  styleVars: PropTypes.object.isRequired,
  pawsPosition: PropTypes.string.isRequired
};

const BongoCat = memo(
  ({ size = 0.5, color = '#000', onBongo, containerRef }) => {
    const { isPawsDown, containerTop, catSize, isVisible, containerZIndex } =
      useBongoCat({ containerRef, size, onBongo });

    const styleVars = {
      '--cat-bg': color,
      '--cat-outline':
        color === '#000' ? '#222' : color === '#fff' ? '#eee' : color,
      '--cat-size': catSize
    };

    // If no containerRef is provided, just render the cat without positioning
    if (!containerRef) {
      return (
        <div
          className={styles.container}
          style={styleVars}
          role="img"
          aria-label="Bongo cat animation"
        >
          <CatBody />
          <Paws position="up" className={isPawsDown ? styles.hide : ''} />
          <Paws position="down" className={isPawsDown ? '' : styles.hide} />
        </div>
      );
    }

    // Calculate z-index values
    const catBodyZIndex = Math.max(0, containerZIndex - 1);
    const upPawsZIndex = catBodyZIndex; // Up paws behind container (same as body)
    const downPawsZIndex = 9999; // Down paws above container with high z-index

    // Further adjust the paws position for the most natural cutoff effect
    // Make pawsOffsetY responsive to screen width
    const isMobile = window.innerWidth <= 768;
    const pawsOffsetY = isMobile ? -10 : -20; // Much smaller offset on mobile to bring paws forward

    // Adjust visibility management to ensure a clean cutoff
    const pawsVisibility = isVisible ? 'visible' : 'hidden';

    // Render the positioned cat when containerRef is provided
    return (
      <>
        {/* Base cat body with lower z-index */}
        <div
          className={`${styles.bongoContainerPositioned} ${isVisible ? styles.bongoContainerVisible : styles.bongoContainerHidden}`}
          style={{
            top: `${containerTop}px`,
            zIndex: catBodyZIndex
          }}
        >
          <div
            className={styles.container}
            style={styleVars}
            role="img"
            aria-label="Bongo cat animation"
          >
            <CatBody />
          </div>
        </div>

        {/* Up paws - behind container (same z-index as body) */}
        <PawsContainer
          containerTop={containerTop}
          pawsOffsetY={pawsOffsetY}
          zIndex={upPawsZIndex}
          isVisible={isVisible}
          pawsVisibility={pawsVisibility}
          display={isPawsDown ? 'none' : 'block'}
          styleVars={styleVars}
          pawsPosition="up"
        />

        {/* Down paws - above container with high z-index */}
        <PawsContainer
          containerTop={containerTop}
          pawsOffsetY={pawsOffsetY}
          zIndex={downPawsZIndex}
          isVisible={isVisible}
          pawsVisibility={pawsVisibility}
          display={isPawsDown ? 'block' : 'none'}
          styleVars={styleVars}
          pawsPosition="down"
        />
      </>
    );
  }
);

BongoCat.displayName = 'BongoCat';

BongoCat.propTypes = {
  size: PropTypes.number,
  color: PropTypes.string,
  onBongo: PropTypes.func,
  containerRef: PropTypes.object
};

export default BongoCat;
